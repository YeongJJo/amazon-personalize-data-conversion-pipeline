import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Get Source Data
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "[DATABASE_NAME]", table_name = "[TABLE_NAME]", transformation_ctx = "datasource0")

# Apply Column Mapping
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [[COLUMN_MAPPINGS]], transformation_ctx = "applymapping1")

# Convert to DataFrame and Repartion
repartitioned_df = applymapping1.toDF().repartition(1)

# Covnert to DynamicFrame
repartitioned_dynf = DynamicFrame.fromDF(repartitioned_df, glueContext, "nested")

# Save Output Data
datasink2 = glueContext.write_dynamic_frame.from_options(frame = repartitioned_dynf, connection_type = "s3", connection_options = {"path": "[OUTPUT_PATH]"}, format = "csv", transformation_ctx = "datasink2")

# Run Job
job.commit()